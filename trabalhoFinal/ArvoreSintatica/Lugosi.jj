PARSER_BEGIN(Lugosi)
import java.io.*;
import ast.*;
import java.util.*;

public class Lugosi {

    public static void main(String args[]) throws Exception {

    FileInputStream fs = new FileInputStream(new File(args[0]));

    Lugosi parser = new Lugosi(fs);
    // Chamar a primeira regra do parser que irá
    // analisar o código e devolver a árvore sintática
    Prog arvore = parser.Lugosi();
    // passar a árvore para o gerador de código
    // que deve gerar um arquivo com com o código
    // alvo na linguagem escolhida:
    GeraCodigo.gerar(arvore);
    }

}}

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <FLOAT: "float">
| <BOOL: "bool">
| <TRUE: "true">
| <FALSE: "false">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <PONTOEVIRGULA: ";">
| <LET: "let">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINTIO: "printIO">
| <READIO: "readIO">
| <ATRIBUICAO: ":=">
| <APARENTESES:"(">
| <FPARENTESES:")">
| <DEF: "def">
| <VIRGULA: ",">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <MENOR: "<">
| <MAIOR: ">">
| <IGUAL: "==">
}

TOKEN :
{
    <NUM : (["0"-"9"])+(["."](["0"-"9"])+)?>
    |<ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
}

Prog Lugosi () :
{Main main; ArrayList<Fun> fun = new ArrayList<Fun>();}
{

    main=Main()
    fun=Func()

{return new Prog(main,fun);}
}

void Main () :
{ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); ArrayList<Comando> coms = new ArrayList<Comando>();}
{
    <VOID> <MAIN> <ACHAVES> vars=VarDecl() coms=SeqComandos() <FCHAVES>

{return new Main(vars,coms);}
}



ArrayList<VarDecl> VarDecl () :
{ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); String type; String var; ArrayList<VarDecl> maisVars;}
{
    (<LET> type=Tipo() var=<ID>.image <PONTOEVIRGULA> {vars.add(new VarDecl(type,var)); maisVars=VarDecl(); vars
    .addAll(maisVars); })?
    {return vars;}
}

String Tipo () :
{Token tipo;}
{
    t=<FLOAT> | t=<BOOL> | t=<VOID>

    {return t.image;}
}
//Da pra fazer no mesmo estilo para as funções, só que usando o "+" ao invés do "*"
ArrayList<SeqComandos> SeqComandos () :
{ArrayList<Comando> coms = new ArrayList<Comando>(); Comando com; ArrayList<Comando> maisComs;}
{
    (com=Comando() { coms.add(com); maisComs = SeqComandos(); coms.addAll(maisComs); })?

    {return coms;}
}

Exp Fator () :
{Token t; ArrayList<Exp> args; String fun;}
{
    LOOKAHEAD(2) t = <ID> <APARENTESES> args = ListaExp() <FPARENTESES> {return new EChamaFun(t.image, args);}
    | t = <ID> {return EVar(t.image);}
    | t = <NUM> {return new EFloat(Float.parseFloat(t.image));}
    | <TRUE> {return new ETrue();}
    | <FALSE> {return new EFalse();}
}

String Op ():
{Token t;}
{
    t = <SOMA> | t = <SUB> | t = <MULT> | t = <DIV> | t = <AND> | t = <OR> | t = <MENOR> | tipo = <MAIOR>
    | tipo = <IGUAL>

    {return t.image;}
}

ArrayList<Exp> ListaExp ():
{ArrayList<Exp> exps = new ArrayList<Exp>(); Exp e;}
{
    e = Exp() {exps.add(e);} (<VIRGULA> e = Exp() {exps.add(e);})*

    {return  exps;}
}

ArrayList<Func> Func() :
{ArrayList<Fun> fun = new ArrayList<Fun>(); String nome; ArrayList<ParamFormalFun> params; String retorno;
ArrayList<VarDecl> vars; ArrayList<Comando> body;}
{
    (<DEF> retorno = Tipo() nome = <ID>.image "(" paras = ListaArg() ")" "{" vars = VarDecl() body
    = SeqComandos() "}" {fun.add(new Fun(nome, params, retorno, vars, body));})*

    {return fun;}
}

ArrayList<ParamFormalFun> ListaArg():
{ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>(); String type; String var;}
{
    type = Tipo() var = <ID>.image {params.add(new ParamFormalFun(type, var));} ("," type=Tipo() var = <ID>.image
    {params.add(new ParamFormalFun(type, var)); })*

    {return params;}
}

Exp Exp ():
{String op; Exp arg1; Exp arg2; Exp fator;}
{
    "(" arg1 = Exp() op = Op() arg2 = Exp() ")" {return new EOpExp(op, arg1, arg2);} | fator = Fator() {return fator;}
}

Comando Comando() :
{Token t; Exp exp; ArrayList<Comando> coms = new ArrayList<Comando>(); ArrayList<Exp> args;}
{
    LOOKAHEAD(3) t = <ID> <ATRIBUICAO> exp = Exp() <PONTOEVIRGULA> { return new CAtribuicao(t.beginLine, t.image, exp); }
    | LOOKAHEAD(2) t = <ID> <APARENTESES> args = ListaExp() <FPARENTESES> <PONTOEVIRGULA> { return new CChamadaFun(t.beginLine, t.image, args); }
    | t = <IF> exp = Exp() <ACHAVES> coms = SeqComandos() <FCHAVES> <PONTOEVIRGULA> { return new CIf(t.beginLine, exp, coms); }
    | t = <WHILE> exp = Exp() <DO> <ACHAVES> coms = SeqComandos() <FCHAVES> <PONTOEVIRGULA> { return new CWhile(t.beginLine, exp, coms); }
    | LOOKAHEAD(3) t = <ID> <ATRIBUICAO> <READIO> <APARENTESES> <FPARENTESES> { return new CReadInput(t.beginLine, t.image); }
    | t = <RETURN> exp = Exp() <PONTOEVIRGULA> { return new CReturn(t.beginLine, exp); }
    | t = <PRINTIO> exp = Exp() <PONTOEVIRGULA> { return new CPrint(t.beginLine, exp); }
}